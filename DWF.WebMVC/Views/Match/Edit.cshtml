@model DWF.Models.Match.RoundCreateMatchEdit

@{
    ViewBag.Title = "Edit";
}

<div class="div-neon" style="width: 550px; height: 200px; z-index: 1; position: absolute;">
    <p class="p-neon">
        <span class="span-neon">-</span>
        <span class="span-neon">D</span>
        <span class="span-neon">A</span>
        <span class="span-neon">R</span>
        <span class="span-neon">T</span>
        <span class="span-neon">I</span>
        <span class="span-neon">N</span>
        <span class="span-neon">'</span>
        <span class="span-neon">-</span>
        <span class="with-friends">WITH FRIENDS</span>
    </p>
</div>

<div class="col-md-8 edit-matchsetup">
    <section id="loginForm">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.MatchId)

                <div class="rightSide col-lg-5">

                    <div class="form-group">
                        @Html.LabelFor(model => model.PlayerOneNeededScore, htmlAttributes: new { @class = "control-label col-md-3 match-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PlayerOneNeededScore, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.PlayerOneNeededScore, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PlayerTwoNeededScore, htmlAttributes: new { @class = "control-label col-md-3 match-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PlayerTwoNeededScore, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.PlayerTwoNeededScore, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PlayerOneAvgRoundScore, htmlAttributes: new { @class = "control-label col-md-3 match-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PlayerOneAvgRoundScore, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.PlayerOneAvgRoundScore, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PlayerTwoAvgRoundScore, htmlAttributes: new { @class = "control-label col-md-3 match-label" })
                        <div class="col-md-10" focus>
                            @Html.EditorFor(model => model.PlayerTwoAvgRoundScore, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.PlayerTwoAvgRoundScore, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

                <div class="leftSide col-lg-6">

                    @if (Model.IsTurn == false)
                    {
                        <div class="form-group div-match">
                            @Html.LabelFor(model => model.PlayerOneRoundScore, htmlAttributes: new { @class = "control-label col-md-3 match-label" })
                            <div class="col-md-10" id="focusme">
                                @Html.EditorFor(model => model.PlayerOneRoundScore, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PlayerOneRoundScore, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        Model.IsTurn = true;

                        if (TempData.ContainsKey("P2Bust"))
                        {
                            <div class="alert alert-success fade in col-md-5" role="alert">

                                <button type="button" class="close" data-dismiss="alert">
                                    <span>&times;</span>
                                </button>
                                @TempData["P2Bust"]
                            </div>
                        }
                    }
                    else
                    {
                        <div class="form-group div-match">
                            @Html.LabelFor(model => model.PlayerTwoRoundScore, htmlAttributes: new { @class = "control-label col-md-3 match-label" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.PlayerTwoRoundScore, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PlayerTwoRoundScore, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        if (TempData.ContainsKey("P1Bust"))
                        {
                            <div class="alert alert-success fade in col-md-6" role="alert">

                                <button type="button" class="close" data-dismiss="alert">
                                    <span>&times;</span>
                                </button>
                                @TempData["P1Bust"]
                            </div>
                        }
                    }

                    <div class="form-group">
                        <div class="col-md-offset-0 col-md-10">
                            <input type="submit" value="&#128076;" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="col-lg-12">
            @Html.ActionLink("Back to List", "Index", "MatchSetup", new { area = "" }, new { @style = "border: 1px solid white; color: white; border-radius: 5px; padding: 3px; text-decoration: none" })
        </div>
    </section>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
